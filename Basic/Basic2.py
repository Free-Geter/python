# list的创建
# 1.列表用于存储任意数目、任意类型的数据集合。在 Python 中，用方括号 [] 来表示列表，并用逗号来分隔其中的元素。语法格式如下：
a = [10, 20, 30, 40]
a = [10, 20, 'abc', True, 3.14]

# 2.使用 list()可以将任何可迭代的数据转化成列表。
a = list()  # 创建一个空的列表对象
b = list("gaoqi,sxt")
print(a)
print(b)

# 3.使用range创建整数数列
# 其中 start 参数：可选，表示起始数字，默认是 0；end 参数：必选，表示结尾数字；step 参数：可选，表示步长，默认为 1。
# Python3 中 range()返回的是一个 range 对象，而不是列表。需要通过 list()方法将其转换成列表对象。
a = list(range(3, 15, 2))  # 从 3 开始步长是 2 及从开始每次增加 2
b = list(range(15, 3, -1))  # 从 15 开始每次减 1
c = list(range(3, -10, -1))  # 从 3 开始每次递减 1
print(a)
print(b)
print(c)

# 4.使用列表推导式可以非常方便的创建列表，在开发中经常使用。列表推导式生成列表对象。
a = [x for x in range(1, 5)]
b = [x * 2 for x in range(1, 5)]
c = [x * 2 for x in range(1, 20) if x % 5 == 0]
d = [x for x in "abcdefg"]
print("a 列表的元素:", a)
print("b 列表的元素:", b)
print("c 列表的元素:", c)
print("d 列表的元素:", d)
#######################################################################################

# 列表的增删改查（除非必要，一般只在列表的尾部添加元素或删除元素，这会大大提高列表的操作效率。）

# 列表中添加元素
a = [10, 20, 30]
a.append(40)
print('增加元素后的列表：', a)

# 列表使用+操作符相加（+运算符操作，并不是真正的尾部添加元素，
# 而是创建新的列表对象；将原列表的元素和新列表的元素依次复制到新的列表对象中。这样，会涉及大量的复制操作，对于操作大量元素不建议使用。）
a = [10, 20, 30]
print('a 的地址：', id(a))
b = [40, 50]
a = a + b
print('a 列表的元素：', a)
print('a 的地址：', id(a))  # 通过如上测试，发现变量 a 的地址发生了变化。也就是创建了新的列表对象。

# 使用 extend()方法添加列表（extend()方法，将目标列表的所有元素添加到本列表的尾部，属于原地操作，不创建新的列表对象。
a = [10, 20, 30]
print('a 的地址：', id(a))
b = [40, 50]
a.extend(b)
print('a 列表的元素：', a)
print('a 的地址：', id(a))

# 使用 insert 函数插入元素
# 使用 insert()方法可以将指定的元素插入到列表对象的任意制定位置。这样会让插入位置后面所有的元素进行移动，会影响处理速度。
# 涉及大量元素时，尽量避免使用。类似发生这种移动的函数还有：remove()、pop()、del()，它们在删除非尾部元素时也会发生操作位置后面元素的移动。
a = [10, 20, 30]
a.insert(2, 100)  # 在列表 a 的索引 2 处插入元素 100
print(a)
#######################################################################################

# 列表内的查找
# a) 通过索引直接访问元素
a = [10, 20, 30, 40, 50, 60, 70, 80, 90]
# 列表中有 9 个元素从左侧获取的索引范围：[0 到 8]
# 列表中有 9 个元素从右侧获取的索引范围：[-1 到-9]
print(a[-9])
print(a[0])
print(a[9])  # 超出范围

# b) index()获得指定元素在列表中首次出现的索引
# index()可以获取指定元素首次出现的索引位置。
# 语法是：index(value,[start,[end]])。其中，start 和 end 指定了搜索的范围
a = [10, 20, 30, 40, 50, 20, 30, 20, 30]
print(a.index(20))  # 从列表中搜索第一个 20
print(a.index(20, 3))  # 从索引位置 3 开始往后搜索的第一个 20
print(a.index(30, 5, 7))  # 从索引位置 5 到 7 这个区间，第一次出现 30 元素的位置
#######################################################################################

# 列表的修改
# 修改列表中的某一个元素，可以像使用数组一样对列表中的特定元素赋值，也就是使用一对中括号指定元素在列表中的索引，然后使用赋值运算符（=）进行赋值。
s = ['admin', 'lili', 'john']
s[0] = '管理员'
print('修改后列表的元素：', s)

#######################################################################################
# 列表的删除
# a) del 删除
a = [1, 2, 3, 4, 5, 6]
del a[2]
print("删除后列表的元素:", a)

# b) pop 删除
a = [1, 2, 3, 4, 5, 6]
b = a.pop()  # 没有指定位置，默认的是最后一个元素
print(b)
print(a)
c = a.pop(2)  # 删除下标为 2 的元素
print(c)
print(a)

# c) remove 删除
a = [10, 20, 30, 40, 50, 20, 30, 20, 30]
a.remove(20)
print(a)
a.remove(100)  # 没有 100 这个元素，会抛出异常
#######################################################################################

# 列表的特殊运算
# 1.列表的乘法
a = ['sxt', 100]
b = a * 3
print(a)
print(b)

# 2.列表的长度、最大值和最小值
a = [10, 20, 30, 40, 50, 60]
print(len(a))  # 运行结果是 6
print(max(a))  # 运行结果是 60
print(min(a))  # 运行结果是 10
b = ['a', 30, 'b', 40]
print(max(b))  # 字符串和数字不能比较，将抛出异常

# 3.copy()进行复制列表
aa = ['a', 'b', 'c']
bb = aa.copy()
print(aa)
print(bb)

# 4.count()统计元素出现的次数
a = [10, 20, 40, 30, 10, 20, 50, 10]
print('元素 10 出现的次数：', a.count(10))
print('元素 20 出现的次数：', a.count(20))
print('元素 30 出现的次数：', a.count(30))

# 5.reverse()用于将列表中的元素反向存放
a = [1, 2, 3, 4, 5, 6, 7]
a.reverse()
print(a)

# 6.sort()用于对列表进行排序，调用该方法会改变原来的列表
a = [11, 20, 13, 34, 5, 36, 17]
a.sort()
print(a)
print('正序：', a)
a.sort(reverse=True)
print('逆序：', a)

# 7.sorted 用于对列表进行排序，生成新列表，不改变原来的列表
print('-' * 5, 'sorted 排序', '-' * 5)
a = [11, 20, 13, 34, 5, 36, 17]
b = sorted(a)
print('a 列表：', a)  # 原来列表不会被修改
print('正序 a 列表：', b)
b = sorted(a, reverse=True)
print('逆序 a 列表：', b)

# 8.clear()用于清空列表内容
a=[11,20,13,'a',True,'hello']
a.clear()
print(a)

